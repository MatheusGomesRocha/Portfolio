[{"C:\\Users\\mathe\\Documents\\portfolio\\src\\index.js":"1","C:\\Users\\mathe\\Documents\\portfolio\\src\\App.js":"2","C:\\Users\\mathe\\Documents\\portfolio\\src\\reportWebVitals.js":"3","C:\\Users\\mathe\\Documents\\portfolio\\src\\AppStyled.js":"4","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\DefaultText.js":"5","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\AboutMeComponent.js":"6","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\AboutMeStyled.js":"7","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\BenefitsComponent.js":"8","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\BenefitsStyled.js":"9","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\MoreInfoComponent.js":"10","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\MoreInfoStyled.js":"11","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\CircleProgressBar.js":"12","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\CircleProgressBarBase.js":"13","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\WorksComponent.js":"14","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\WorksStyled.js":"15","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\ContactComponent.js":"16","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\ContactStyled.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":4049,"mtime":1612528916852,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":556,"mtime":1612529362733,"results":"22","hashOfConfig":"19"},{"size":386,"mtime":1612287198306,"results":"23","hashOfConfig":"19"},{"size":3980,"mtime":1612382871126,"results":"24","hashOfConfig":"19"},{"size":1619,"mtime":1612382898861,"results":"25","hashOfConfig":"19"},{"size":3997,"mtime":1612528777237,"results":"26","hashOfConfig":"19"},{"size":1208,"mtime":1612467811895,"results":"27","hashOfConfig":"19"},{"size":5695,"mtime":1612467973402,"results":"28","hashOfConfig":"19"},{"size":1385,"mtime":1612442817991,"results":"29","hashOfConfig":"19"},{"size":5363,"mtime":1612382232106,"results":"30","hashOfConfig":"19"},{"size":18951,"mtime":1612442294543,"results":"31","hashOfConfig":"19"},{"size":837,"mtime":1612468104828,"results":"32","hashOfConfig":"19"},{"size":515,"mtime":1612444059182,"results":"33","hashOfConfig":"19"},{"size":2744,"mtime":1612532286727,"results":"34","hashOfConfig":"19"},{"size":1270,"mtime":1612532201322,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1rdlzct",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mathe\\Documents\\portfolio\\src\\index.js",[],["77","78"],"C:\\Users\\mathe\\Documents\\portfolio\\src\\App.js",["79"],"C:\\Users\\mathe\\Documents\\portfolio\\src\\reportWebVitals.js",[],"C:\\Users\\mathe\\Documents\\portfolio\\src\\AppStyled.js",["80"],"C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\DefaultText.js",[],"C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\AboutMeComponent.js",["81","82","83","84","85","86","87","88","89","90","91","92"],"import {DefaultText} from './DefaultText';\r\n\r\nimport Back from '../svg/back.svg';\r\nimport Mobile from '../svg/mobile.svg';\r\nimport Front from '../svg/front.svg';\r\n\r\nimport {\r\n    MainDiv,\r\n    TopDiv,\r\n    BlockDiv,\r\n    ItemDiv,\r\n    Svg,\r\n    BlockBottomDiv, BlockTopDiv,\r\n} from './AboutMeStyled';\r\n\r\nexport default () => {\r\n    let primaryColor = '#2f2e41';\r\n    let secondaryColor = '#666';\r\n\r\n    let array = [\r\n        {\r\n            id: 1,\r\n            svg: Front,\r\n            title: 'Programação Front-end',\r\n            content: 'Gosto de copiar designs e sempre tentar algo novo, como uma animação, um efeito e etc.',\r\n            subtitle: 'Linguagens que uso:',\r\n            languages: ['HTML & CSS'+'\\n', 'Bootstrap'+'\\n', 'Javascript'+'\\n', 'Jquery'+'\\n', 'React'+'\\n'],\r\n            bLeft: true,\r\n            bRight: false,\r\n        },\r\n\r\n        {\r\n            id: 2,\r\n            svg: Back,\r\n            title: 'Programação Back-end',\r\n            content: 'Com certeza é minha parte favorita da programação, gosto de pensar até resolver o problema de lógica de como fazer tal função.',\r\n            subtitle: 'Linguagens que uso:',\r\n            languages: ['PHP'+'\\n', 'Laravel'+'\\n', 'AJAX'+'\\n', 'Firebase'+'\\n'],\r\n            bLeft: false,\r\n            bRight: false,\r\n        },\r\n\r\n        {\r\n            id: 3,\r\n            svg: Mobile,\r\n            title: 'Programação Mobile',\r\n            content: 'Essa é a área que tenho menos tempo de estudo, mas é a com mais projetos feitos.',\r\n            subtitle: 'Linguagens que uso:',\r\n            languages: ['React-Native'+'\\n', 'Firebase'+'\\n'],\r\n            bLeft: false,\r\n            bRight: true,\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <MainDiv>\r\n            <TopDiv>\r\n                <DefaultText mTop={\"30px\"} color={'#2f2e41'} align={\"center\"} bolder={\"bold\"} font={\"25px\"}>\r\n                    Meu nome é Matheus, e sou um desenvolvedor Full-Stack em formação\r\n                </DefaultText>\r\n\r\n                <DefaultText width={\"75%\"} font={\"22px\"} align={\"center\"} color={secondaryColor}>\r\n                    Oi, tenho 19 anos e estou na área de programação à 2 anos. Comecei quando iniciei a faculdade de\r\n                    Análise\r\n                    e Desenvolvimento de Sistemas, a qual estou no 5º semestre. Não tenho nenhuma experiência\r\n                    profissional,\r\n                    apenas alguns projetos que fiz para estudo e experiência própria, visando um projeto real.\r\n                </DefaultText>\r\n            </TopDiv>\r\n\r\n            <BlockDiv>\r\n                {array.map((item, k) => (\r\n                    <ItemDiv key={k} bLeft={item.bLeft ? '1px solid #999' : null} rightTop={item.bRight ? '10px' : null} rightBottom={item.bRight ? '10px' : null} leftTop={item.bLeft ? '10px' : null} leftBottom={item.bLeft ? '10px' : null}>\r\n                        <BlockTopDiv>\r\n                            <Svg src={item.svg} width={80} height={80} fill={\"#845EC2\"}/>\r\n\r\n                            <DefaultText color={primaryColor} font={\"18px\"} align={\"center\"} bolder={\"bold\"}>{item.title}</DefaultText>\r\n\r\n                            <DefaultText style={{height: 120}} font={\"18px\"} color={secondaryColor} align={\"center\"}> {item.content} </DefaultText>\r\n                        </BlockTopDiv>\r\n\r\n                        <BlockBottomDiv>\r\n                            <DefaultText font={\"18px\"} align={\"center\"} color={\"#FF5E62\"} bolder={\"bold\"}>\r\n                                {item.subtitle}\r\n                            </DefaultText>\r\n\r\n                            <DefaultText font={\"18px\"} style={{whiteSpace: 'pre-wrap'}} align={\"center\"} bolder={\"bold\"} color={primaryColor}>\r\n                                {item.languages}\r\n                            </DefaultText>\r\n                        </BlockBottomDiv>\r\n\r\n                    </ItemDiv>\r\n                ))}\r\n            </BlockDiv>\r\n        </MainDiv>\r\n    );\r\n}","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\AboutMeStyled.js",["93"],"import styled from 'styled-components';\r\n\r\nconst defaultBackgroundColor = '#fff';\r\n\r\nexport const MainDiv = styled.div`\r\n    background: linear-gradient(90deg, #ff9966 0%, #ff5e62 100%);    \r\n    padding-bottom: 70px;\r\n    position: relative;\r\n`;\r\nexport const TopDiv = styled.div`\r\n    width: 100%;\r\n    padding-bottom: 350px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: #fff;\r\n`;\r\nexport const BlockDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-top: -300px;\r\n    margin-bottom: 50px;\r\n    width: 100%;\r\n    justify-content: center;\r\n    \r\n`;\r\nexport const ItemDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 20px;\r\n    background-color: #fff;\r\n    height: 600px;\r\n    width: 25%;\r\n    border-right: 1px solid #999;\r\n    border-left: ${props=>props.bLeft};\r\n    border-top: 1px solid #999;\r\n    border-bottom: 1px solid #999;\r\n    border-top-left-radius: ${props=>props.leftTop};\r\n    border-bottom-left-radius: ${props=>props.leftBottom};\r\n    border-top-right-radius: ${props=>props.rightTop};\r\n    border-bottom-right-radius: ${props=>props.rightBottom};\r\n    border-bottom: 1px solid #999;\r\n`;\r\nexport const Svg = styled.img``;\r\nexport const BlockTopDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 20px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 10px 0;\r\n`;\r\nexport const BlockBottomDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column; \r\n    margin-top: 80px;\r\n`;","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\BenefitsComponent.js",["94","95","96"],"import {useState, useEffect} from \"react\";\r\nimport {DefaultText} from \"./DefaultText\";\r\nimport Responsive from '../svg/resize.svg';\r\nimport Clean from '../svg/menu.svg';\r\nimport Fast from '../svg/lighting.svg';\r\nimport Seo from '../svg/search.svg';\r\n\r\nimport './Benefits.css';\r\n\r\nimport {\r\n    MainDiv,\r\n    GridDiv,\r\n    ItemDiv,\r\n    RowDiv,\r\n    SvgDiv,\r\n    Svg\r\n} from './BenefitsStyled';\r\n\r\nexport default (props) => {\r\n    return (\r\n        <MainDiv>\r\n            <DefaultText align={\"center\"} color={\"#2f2e41\"} font={\"40px\"} bolder={\"bold\"}>Benefícios de trabalhar comigo</DefaultText>\r\n            <GridDiv>\r\n                <ItemDiv display={props.display ? 'flex' : 'none'} className={\"item1\"}>\r\n                    <DefaultText font={\"25px\"} color={\"#2f2e41\"} bolder={\"bold\"}>O básico</DefaultText>\r\n                    <RowDiv>\r\n                        <SvgDiv>\r\n                            <Svg src={Responsive}/>\r\n                        </SvgDiv>\r\n                        <DefaultText font={\"22px\"} color={\"#2f2e41\"} bolder={\"bold\"} mTop={\"0\"}>Design\r\n                            Responsivo</DefaultText>\r\n                    </RowDiv>\r\n\r\n                    <RowDiv>\r\n                        <SvgDiv>\r\n                            <Svg src={Fast}/>\r\n                        </SvgDiv>\r\n                        <DefaultText font={\"22px\"} color={\"#2f2e41\"} bolder={\"bold\"} mTop={\"0\"}>Carregamento\r\n                            rápido</DefaultText>\r\n                    </RowDiv>\r\n\r\n                    <RowDiv>\r\n                        <SvgDiv>\r\n                            <Svg src={Clean}/>\r\n                        </SvgDiv>\r\n                        <DefaultText font={\"22px\"} color={\"#2f2e41\"} bolder={\"bold\"} mTop={\"0\"}>Código limpo</DefaultText>\r\n                    </RowDiv>\r\n\r\n                    <RowDiv>\r\n                        <SvgDiv>\r\n                            <Svg src={Seo}/>\r\n                        </SvgDiv>\r\n                        <DefaultText font={\"22px\"} color={\"#2f2e41\"} bolder={\"bold\"} mTop={\"0\"}>SEO</DefaultText>\r\n                    </RowDiv>\r\n                </ItemDiv>\r\n\r\n                <ItemDiv display={props.display2 ? 'flex' : 'none'} className={\"item2\"}>\r\n                    <DefaultText font={\"25px\"} color={\"#2f2e41\"} bolder={\"bold\"} mTop={\"0\"}>Fluxo rápido de\r\n                        trabalho</DefaultText>\r\n                    <DefaultText font={\"25px\"} color={\"#999\"} bolder={\"bold\"} mTop={\"0\"}>Rápido como um\r\n                        raio</DefaultText>\r\n                </ItemDiv>\r\n\r\n                <ItemDiv display={props.display3 ? 'flex' : 'none'} className={\"item3\"}>\r\n                    <DefaultText font={\"25px\"} color={\"#2f2e41\"} bolder={\"bold\"} mTop={\"0\"}>Desenvolvimento</DefaultText>\r\n                    <DefaultText font={\"25px\"} color={\"#999\"} bolder={\"bold\"} mTop={\"0\"}>Tudo por uma mão</DefaultText>\r\n                    <DefaultText color={\"#2f2e41\"} width={\"80%\"} font={\"22px\"}>\r\n                        Todo o trabalho de desenvolvimento, do começo ao fim, será feito por uma pessoa, ou seja, você\r\n                        só\r\n                        precisará ter contado comigo.\r\n                    </DefaultText>\r\n                </ItemDiv>\r\n\r\n                <ItemDiv display={props.display4 ? 'flex' : 'none'} className={\"item4\"}>\r\n                    <DefaultText font={\"25px\"} color={\"#2f2e41\"} bolder={\"bold\"} mTop={\"0\"}>Relatório de\r\n                        atividades</DefaultText>\r\n                    <DefaultText font={\"25px\"} color={\"#999\"} bolder={\"bold\"} mTop={\"0\"}>Todo o suporte\r\n                        grantido</DefaultText>\r\n                    <DefaultText color={\"#2f2e41\"} font={\"22px\"} width={\"80%\"}>\r\n                        Caso o cliente queira, pode acompanhar de perto o projeto, quanto dele já foi feito, quanto\r\n                        falta e etc.\r\n                    </DefaultText>\r\n                </ItemDiv>\r\n            </GridDiv>\r\n\r\n        </MainDiv>\r\n    );\r\n}","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\BenefitsStyled.js",[],"C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\MoreInfoComponent.js",["97","98"],"import {useState, useEffect} from \"react\";\r\nimport {DefaultText} from \"./DefaultText\";\r\nimport AnimatedNumber from \"animated-number-react\";\r\nimport Smile from '../svg/smile.svg';\r\nimport Clock from '../svg/clock.svg';\r\nimport Edit from '../svg/edit.svg';\r\nimport Coffee from '../svg/coffee-cup.svg';\r\nimport {CircleProgressBar1, CircleProgressBar2, CircleProgressBar3, CircleProgressBar4, CircleProgressBar5} from './CircleProgressBar';\r\n\r\nimport {\r\n    MainDiv,\r\n    GridTopDiv,\r\n    ItemCircleDiv,\r\n    GridDiv,\r\n    BlockDiv,\r\n    Svg\r\n} from \"./MoreInfoStyled\";\r\n\r\nexport default (props) => {\r\n    const [hover1, setHover1] = useState(false);\r\n    const [hover2, setHover2] = useState(false);\r\n    const [hover3, setHover3] = useState(false);\r\n    const [hover4, setHover4] = useState(false);\r\n\r\n    return (\r\n        <MainDiv>\r\n\r\n            <DefaultText align={\"center\"} font={\"40px\"} bolder={\"bold\"} color={\"#2f2e41\"} >Minhas especialidades</DefaultText>\r\n            <DefaultText mTop={\"0\"} align={\"center\"} font={\"25px\"} color={\"#999\"} >Algumas de minhas habilidades</DefaultText>\r\n\r\n            <GridTopDiv>\r\n                <ItemCircleDiv>\r\n                    <CircleProgressBar1 />\r\n                    <DefaultText mTop={\"-10px\"} color={\"#2f2e41\"} font={\"25px\"} align={\"center\"}>Back-end</DefaultText>\r\n                </ItemCircleDiv>\r\n\r\n                <ItemCircleDiv>\r\n                    <CircleProgressBar2 />\r\n                    <DefaultText mTop={\"-10px\"} color={\"#2f2e41\"} font={\"25px\"} align={\"center\"}>Front-end</DefaultText>\r\n                </ItemCircleDiv>\r\n\r\n                <ItemCircleDiv>\r\n                    <CircleProgressBar3 />\r\n                    <DefaultText mTop={\"-10px\"} color={\"#2f2e41\"} font={\"25px\"} align={\"center\"}>Mobile</DefaultText>\r\n                </ItemCircleDiv>\r\n\r\n                <ItemCircleDiv>\r\n                    <CircleProgressBar4 />\r\n                    <DefaultText mTop={\"-10px\"} color={\"#2f2e41\"} font={\"25px\"} align={\"center\"}>Performance</DefaultText>\r\n                </ItemCircleDiv>\r\n\r\n                <ItemCircleDiv>\r\n                    <CircleProgressBar5 />\r\n                    <DefaultText mTop={\"-10px\"} color={\"#2f2e41\"} font={\"25px\"} align={\"center\"}>Expriência do usuário</DefaultText>\r\n                </ItemCircleDiv>\r\n            </GridTopDiv>\r\n\r\n            <GridDiv>\r\n                <BlockDiv display={props.showMoreInfo ? 'flex' : 'none'} onMouseOver={() => setHover1(true)}\r\n                          onMouseOut={() => setHover1(false)} background={\"#FF5E62\"} color={\"#fff\"}>\r\n                    <Svg transform={hover1 ? 'scale(1.2)' : 'scale(1)'} src={Smile}/>\r\n                    {props.showMoreInfo ?\r\n                        <AnimatedNumber\r\n                            value={19}\r\n                            formatValue={n => n.toFixed(0)}\r\n                            duration={3000}\r\n                        />\r\n                        :\r\n                        null\r\n                    }\r\n\r\n                    <DefaultText color={\"#fff\"} align={\"center\"} bolder={\"bold\"} font={\"25px\"} mTop={\"10px\"}>Clientes\r\n                        satisfeitos</DefaultText>\r\n                </BlockDiv>\r\n\r\n                <BlockDiv display={props.showMoreInfo ? 'flex' : 'none'} onMouseOver={() => setHover2(true)}\r\n                          onMouseOut={() => setHover2(false)}>\r\n                    <Svg transform={hover2 ? 'scale(1.2)' : 'scale(1)'} src={Coffee}/>\r\n                    {props.showMoreInfo ?\r\n                        <AnimatedNumber\r\n                            value={2147}\r\n                            formatValue={n => n.toFixed(0)}\r\n                            duration={3000}\r\n                        />\r\n                        :\r\n                        null\r\n                    }\r\n\r\n                    <DefaultText color={\"#2f2e41\"} align={\"center\"} bolder={\"bold\"} font={\"25px\"} mTop={\"10px\"}>Copos de\r\n                        café</DefaultText>\r\n                </BlockDiv>\r\n\r\n                <BlockDiv display={props.showMoreInfo ? 'flex' : 'none'} onMouseOver={() => setHover3(true)}\r\n                          onMouseOut={() => setHover3(false)} background={\"#FF5E62\"} color={\"#fff\"}>\r\n                    <Svg transform={hover3 ? 'scale(1.2)' : 'scale(1)'} src={Edit}/>\r\n                    {props.showMoreInfo ?\r\n                        <AnimatedNumber\r\n                            value={3485}\r\n                            formatValue={n => n.toFixed(0)}\r\n                            duration={3000}\r\n                        />\r\n                        :\r\n                        null\r\n                    }\r\n\r\n                    <DefaultText color={\"#fff\"} align={\"center\"} bolder={\"bold\"} font={\"25px\"} mTop={\"10px\"}>Linhas de\r\n                        códigos</DefaultText>\r\n                </BlockDiv>\r\n\r\n                <BlockDiv display={props.showMoreInfo ? 'flex' : 'none'} onMouseOver={() => setHover4(true)}\r\n                          onMouseOut={() => setHover4(false)}>\r\n                    <Svg transform={hover4 ? 'scale(1.2)' : 'scale(1)'} src={Clock}/>\r\n                    {props.showMoreInfo ?\r\n                        <AnimatedNumber\r\n                            value={8}\r\n                            formatValue={n => n.toFixed(0)}\r\n                            duration={3000}\r\n                        />\r\n                        :\r\n                        null\r\n                    }\r\n\r\n                    <DefaultText color={\"#2f2e41\"} align={\"center\"} bolder={\"bold\"} font={\"25px\"} mTop={\"10px\"}>Projetos\r\n                        completados</DefaultText>\r\n                </BlockDiv>\r\n            </GridDiv>\r\n\r\n\r\n        </MainDiv>\r\n    )\r\n}","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\MoreInfoStyled.js",[],"C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\CircleProgressBar.js",[],"C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\CircleProgressBarBase.js",["99","100","101","102","103","104","105","106","107","108","109","110","111"],"import React, { useState, useEffect } from 'react';\r\n\r\nconst INITIAL_OFFSET = 25;\r\nconst circleConfig = {\r\n    viewBox: '0 0 38 38',\r\n    x: '19',\r\n    y: '19',\r\n    radio: '15.91549430918954'\r\n};\r\n\r\nconst CircleProgressBarBase = ({\r\n                                   className,\r\n                                   strokeColor,\r\n                                   strokeWidth,\r\n                                   innerText,\r\n                                   legendText,\r\n                                   percentage,\r\n                                   trailStrokeWidth,\r\n                                   trailStrokeColor,\r\n                                   trailSpaced,\r\n                                   speed\r\n                               }) => {\r\n    const [progressBar, setProgressBar] = useState(0);\r\n    const pace = percentage / speed;\r\n    const updatePercentage = () => {\r\n        setTimeout(() => {\r\n            setProgressBar(progressBar + 1);\r\n        }, pace);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (percentage > 0) updatePercentage();\r\n    }, [percentage]);\r\n\r\n    useEffect(() => {\r\n        if (progressBar < percentage) updatePercentage();\r\n    }, [progressBar]);\r\n\r\n    return (\r\n        <figure className={className}>\r\n            <svg viewBox={circleConfig.viewBox}>\r\n                <circle\r\n                    className=\"donut-ring\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={trailStrokeColor}\r\n                    strokeWidth={trailStrokeWidth}\r\n                    strokeDasharray={trailSpaced ? 1 : 0}\r\n                />\r\n\r\n                <circle\r\n                    className=\"donut-segment\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={strokeColor}\r\n                    strokeWidth={strokeWidth}\r\n                    strokeDasharray={`${progressBar} ${100 - progressBar}`}\r\n                    strokeDashoffset={INITIAL_OFFSET}\r\n                />\r\n\r\n                <g className=\"chart-text\">\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-number\">\r\n                        {progressBar}%\r\n                    </text>\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-label\">\r\n                        {innerText}\r\n                    </text>\r\n                </g>\r\n            </svg>\r\n            {legendText && (\r\n                <figcaption className=\"figure-key\">\r\n                    <ul\r\n                        className=\"figure-key-list\"\r\n                        aria-hidden=\"true\"\r\n                        role=\"presentation\"\r\n                    >\r\n                        <li>\r\n                            <span className=\"shape-circle\" />\r\n                            <span>{legendText}</span>\r\n                        </li>\r\n                    </ul>\r\n                </figcaption>\r\n            )}\r\n        </figure>\r\n    );\r\n};\r\n\r\n\r\nexport const CircleProgressBarBase1 = ({\r\n                                   className,\r\n                                   strokeColor,\r\n                                   strokeWidth,\r\n                                   innerText,\r\n                                   legendText,\r\n                                   percentage,\r\n                                   trailStrokeWidth,\r\n                                   trailStrokeColor,\r\n                                   trailSpaced,\r\n                                   speed\r\n                               }) => {\r\n    const [progressBar, setProgressBar] = useState(0);\r\n    const pace = percentage / speed;\r\n    const updatePercentage = () => {\r\n        setTimeout(() => {\r\n            setProgressBar(progressBar + 1);\r\n        }, pace);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (percentage > 0) updatePercentage();\r\n    }, [percentage]);\r\n\r\n    useEffect(() => {\r\n        if (progressBar < percentage) updatePercentage();\r\n    }, [progressBar]);\r\n\r\n    return (\r\n        <figure className={className}>\r\n            <svg viewBox={circleConfig.viewBox}>\r\n                <circle\r\n                    className=\"donut-ring\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={trailStrokeColor}\r\n                    strokeWidth={trailStrokeWidth}\r\n                    strokeDasharray={trailSpaced ? 1 : 0}\r\n                />\r\n\r\n                <circle\r\n                    className=\"donut-segment\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={strokeColor}\r\n                    strokeWidth={strokeWidth}\r\n                    strokeDasharray={`${progressBar} ${100 - progressBar}`}\r\n                    strokeDashoffset={INITIAL_OFFSET}\r\n                />\r\n\r\n                <g className=\"chart-text\">\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-number\">\r\n                        {progressBar}%\r\n                    </text>\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-label\">\r\n                        {innerText}\r\n                    </text>\r\n                </g>\r\n            </svg>\r\n            {legendText && (\r\n                <figcaption className=\"figure-key\">\r\n                    <ul\r\n                        className=\"figure-key-list\"\r\n                        aria-hidden=\"true\"\r\n                        role=\"presentation\"\r\n                    >\r\n                        <li>\r\n                            <span className=\"shape-circle\" />\r\n                            <span>{legendText}</span>\r\n                        </li>\r\n                    </ul>\r\n                </figcaption>\r\n            )}\r\n        </figure>\r\n    );\r\n};\r\n\r\nexport const CircleProgressBarBase2 = ({\r\n                                   className,\r\n                                   strokeColor,\r\n                                   strokeWidth,\r\n                                   innerText,\r\n                                   legendText,\r\n                                   percentage,\r\n                                   trailStrokeWidth,\r\n                                   trailStrokeColor,\r\n                                   trailSpaced,\r\n                                   speed\r\n                               }) => {\r\n    const [progressBar, setProgressBar] = useState(0);\r\n    const pace = percentage / speed;\r\n    const updatePercentage = () => {\r\n        setTimeout(() => {\r\n            setProgressBar(progressBar + 1);\r\n        }, pace);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (percentage > 0) updatePercentage();\r\n    }, [percentage]);\r\n\r\n    useEffect(() => {\r\n        if (progressBar < percentage) updatePercentage();\r\n    }, [progressBar]);\r\n\r\n    return (\r\n        <figure className={className}>\r\n            <svg viewBox={circleConfig.viewBox}>\r\n                <circle\r\n                    className=\"donut-ring\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={trailStrokeColor}\r\n                    strokeWidth={trailStrokeWidth}\r\n                    strokeDasharray={trailSpaced ? 1 : 0}\r\n                />\r\n\r\n                <circle\r\n                    className=\"donut-segment\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={strokeColor}\r\n                    strokeWidth={strokeWidth}\r\n                    strokeDasharray={`${progressBar} ${100 - progressBar}`}\r\n                    strokeDashoffset={INITIAL_OFFSET}\r\n                />\r\n\r\n                <g className=\"chart-text\">\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-number\">\r\n                        {progressBar}%\r\n                    </text>\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-label\">\r\n                        {innerText}\r\n                    </text>\r\n                </g>\r\n            </svg>\r\n            {legendText && (\r\n                <figcaption className=\"figure-key\">\r\n                    <ul\r\n                        className=\"figure-key-list\"\r\n                        aria-hidden=\"true\"\r\n                        role=\"presentation\"\r\n                    >\r\n                        <li>\r\n                            <span className=\"shape-circle\" />\r\n                            <span>{legendText}</span>\r\n                        </li>\r\n                    </ul>\r\n                </figcaption>\r\n            )}\r\n        </figure>\r\n    );\r\n};\r\n\r\nexport const CircleProgressBarBase3 = ({\r\n                                   className,\r\n                                   strokeColor,\r\n                                   strokeWidth,\r\n                                   innerText,\r\n                                   legendText,\r\n                                   percentage,\r\n                                   trailStrokeWidth,\r\n                                   trailStrokeColor,\r\n                                   trailSpaced,\r\n                                   speed\r\n                               }) => {\r\n    const [progressBar, setProgressBar] = useState(0);\r\n    const pace = percentage / speed;\r\n    const updatePercentage = () => {\r\n        setTimeout(() => {\r\n            setProgressBar(progressBar + 1);\r\n        }, pace);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (percentage > 0) updatePercentage();\r\n    }, [percentage]);\r\n\r\n    useEffect(() => {\r\n        if (progressBar < percentage) updatePercentage();\r\n    }, [progressBar]);\r\n\r\n    return (\r\n        <figure className={className}>\r\n            <svg viewBox={circleConfig.viewBox}>\r\n                <circle\r\n                    className=\"donut-ring\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={trailStrokeColor}\r\n                    strokeWidth={trailStrokeWidth}\r\n                    strokeDasharray={trailSpaced ? 1 : 0}\r\n                />\r\n\r\n                <circle\r\n                    className=\"donut-segment\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={strokeColor}\r\n                    strokeWidth={strokeWidth}\r\n                    strokeDasharray={`${progressBar} ${100 - progressBar}`}\r\n                    strokeDashoffset={INITIAL_OFFSET}\r\n                />\r\n\r\n                <g className=\"chart-text\">\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-number\">\r\n                        {progressBar}%\r\n                    </text>\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-label\">\r\n                        {innerText}\r\n                    </text>\r\n                </g>\r\n            </svg>\r\n            {legendText && (\r\n                <figcaption className=\"figure-key\">\r\n                    <ul\r\n                        className=\"figure-key-list\"\r\n                        aria-hidden=\"true\"\r\n                        role=\"presentation\"\r\n                    >\r\n                        <li>\r\n                            <span className=\"shape-circle\" />\r\n                            <span>{legendText}</span>\r\n                        </li>\r\n                    </ul>\r\n                </figcaption>\r\n            )}\r\n        </figure>\r\n    );\r\n};\r\n\r\nexport const CircleProgressBarBase4 = ({\r\n                                   className,\r\n                                   strokeColor,\r\n                                   strokeWidth,\r\n                                   innerText,\r\n                                   legendText,\r\n                                   percentage,\r\n                                   trailStrokeWidth,\r\n                                   trailStrokeColor,\r\n                                   trailSpaced,\r\n                                   speed\r\n                               }) => {\r\n    const [progressBar, setProgressBar] = useState(0);\r\n    const pace = percentage / speed;\r\n    const updatePercentage = () => {\r\n        setTimeout(() => {\r\n            setProgressBar(progressBar + 1);\r\n        }, pace);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (percentage > 0) updatePercentage();\r\n    }, [percentage]);\r\n\r\n    useEffect(() => {\r\n        if (progressBar < percentage) updatePercentage();\r\n    }, [progressBar]);\r\n\r\n    return (\r\n        <figure className={className}>\r\n            <svg viewBox={circleConfig.viewBox}>\r\n                <circle\r\n                    className=\"donut-ring\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={trailStrokeColor}\r\n                    strokeWidth={trailStrokeWidth}\r\n                    strokeDasharray={trailSpaced ? 1 : 0}\r\n                />\r\n\r\n                <circle\r\n                    className=\"donut-segment\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={strokeColor}\r\n                    strokeWidth={strokeWidth}\r\n                    strokeDasharray={`${progressBar} ${100 - progressBar}`}\r\n                    strokeDashoffset={INITIAL_OFFSET}\r\n                />\r\n\r\n                <g className=\"chart-text\">\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-number\">\r\n                        {progressBar}%\r\n                    </text>\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-label\">\r\n                        {innerText}\r\n                    </text>\r\n                </g>\r\n            </svg>\r\n            {legendText && (\r\n                <figcaption className=\"figure-key\">\r\n                    <ul\r\n                        className=\"figure-key-list\"\r\n                        aria-hidden=\"true\"\r\n                        role=\"presentation\"\r\n                    >\r\n                        <li>\r\n                            <span className=\"shape-circle\" />\r\n                            <span>{legendText}</span>\r\n                        </li>\r\n                    </ul>\r\n                </figcaption>\r\n            )}\r\n        </figure>\r\n    );\r\n};\r\n\r\nexport const CircleProgressBarBase5 = ({\r\n                                   className,\r\n                                   strokeColor,\r\n                                   strokeWidth,\r\n                                   innerText,\r\n                                   legendText,\r\n                                   percentage,\r\n                                   trailStrokeWidth,\r\n                                   trailStrokeColor,\r\n                                   trailSpaced,\r\n                                   speed\r\n                               }) => {\r\n    const [progressBar, setProgressBar] = useState(0);\r\n    const pace = percentage / speed;\r\n    const updatePercentage = () => {\r\n        setTimeout(() => {\r\n            setProgressBar(progressBar + 1);\r\n        }, pace);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (percentage > 0) updatePercentage();\r\n    }, [percentage]);\r\n\r\n    useEffect(() => {\r\n        if (progressBar < percentage) updatePercentage();\r\n    }, [progressBar]);\r\n\r\n    return (\r\n        <figure className={className}>\r\n            <svg viewBox={circleConfig.viewBox}>\r\n                <circle\r\n                    className=\"donut-ring\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={trailStrokeColor}\r\n                    strokeWidth={trailStrokeWidth}\r\n                    strokeDasharray={trailSpaced ? 1 : 0}\r\n                />\r\n\r\n                <circle\r\n                    className=\"donut-segment\"\r\n                    cx={circleConfig.x}\r\n                    cy={circleConfig.y}\r\n                    r={circleConfig.radio}\r\n                    fill=\"transparent\"\r\n                    stroke={strokeColor}\r\n                    strokeWidth={strokeWidth}\r\n                    strokeDasharray={`${progressBar} ${100 - progressBar}`}\r\n                    strokeDashoffset={INITIAL_OFFSET}\r\n                />\r\n\r\n                <g className=\"chart-text\">\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-number\">\r\n                        {progressBar}%\r\n                    </text>\r\n                    <text x=\"50%\" y=\"50%\" className=\"chart-label\">\r\n                        {innerText}\r\n                    </text>\r\n                </g>\r\n            </svg>\r\n            {legendText && (\r\n                <figcaption className=\"figure-key\">\r\n                    <ul\r\n                        className=\"figure-key-list\"\r\n                        aria-hidden=\"true\"\r\n                        role=\"presentation\"\r\n                    >\r\n                        <li>\r\n                            <span className=\"shape-circle\" />\r\n                            <span>{legendText}</span>\r\n                        </li>\r\n                    </ul>\r\n                </figcaption>\r\n            )}\r\n        </figure>\r\n    );\r\n};\r\n\r\n\r\nCircleProgressBarBase1.defaultProps = {\r\n    strokeColor: 'blueviolet',\r\n    strokeWidth: 3,\r\n    legendText: '',\r\n    percentage: 90,\r\n    trailStrokeWidth: 3,\r\n    trailStrokeColor: '#d2d3d4',\r\n    trailSpaced: false,\r\n    speed: 5\r\n};\r\nCircleProgressBarBase2.defaultProps = {\r\n    strokeColor: 'blueviolet',\r\n    strokeWidth: 3,\r\n    legendText: '',\r\n    percentage: 75,\r\n    trailStrokeWidth: 3,\r\n    trailStrokeColor: '#d2d3d4',\r\n    trailSpaced: false,\r\n    speed: 5\r\n};\r\nCircleProgressBarBase3.defaultProps = {\r\n    strokeColor: 'blueviolet',\r\n    strokeWidth: 3,\r\n    legendText: '',\r\n    percentage: 80,\r\n    trailStrokeWidth: 3,\r\n    trailStrokeColor: '#d2d3d4',\r\n    trailSpaced: false,\r\n    speed: 5\r\n};\r\nCircleProgressBarBase4.defaultProps = {\r\n    strokeColor: 'blueviolet',\r\n    strokeWidth: 3,\r\n    legendText: '',\r\n    percentage: 72,\r\n    trailStrokeWidth: 3,\r\n    trailStrokeColor: '#d2d3d4',\r\n    trailSpaced: false,\r\n    speed: 5\r\n};\r\nCircleProgressBarBase5.defaultProps = {\r\n    strokeColor: 'blueviolet',\r\n    strokeWidth: 3,\r\n    legendText: '',\r\n    percentage: 93,\r\n    trailStrokeWidth: 3,\r\n    trailStrokeColor: '#d2d3d4',\r\n    trailSpaced: false,\r\n    speed: 5\r\n};\r\n\r\n\r\n","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\WorksComponent.js",["112"],"import {DefaultText} from \"./DefaultText\";\r\nimport Project1 from '../img/project1.png';\r\n\r\nimport {\r\n    MainDiv,\r\n\r\n    GridDiv,\r\n    BlockDiv\r\n} from \"./WorksStyled\";\r\n\r\nexport default () => {\r\n    let primaryColor = '#2f2e41';\r\n    let secondaryColor = '#999';\r\n\r\n    return (\r\n        <MainDiv>\r\n            <DefaultText mTop={\"0\"} align={\"center\"} bolder={\"bold\"} font={\"40px\"} color={primaryColor}>\r\n                Meus trabalhos recentes\r\n            </DefaultText>\r\n            <DefaultText mTop={\"0\"} align={\"center\"} font={\"25px\"} color={secondaryColor}>\r\n                Uma pequena amostra dos meus trabalhos\r\n            </DefaultText>\r\n\r\n            <GridDiv>\r\n                <BlockDiv src={Project1}></BlockDiv>\r\n                <BlockDiv src={Project1}></BlockDiv>\r\n            </GridDiv>\r\n        </MainDiv>\r\n    );\r\n}","C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\WorksStyled.js",[],"C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\ContactComponent.js",["113","114","115","116"],"C:\\Users\\mathe\\Documents\\portfolio\\src\\components\\ContactStyled.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":27,"column":1,"nodeType":"123","endLine":121,"endColumn":2},{"ruleId":"124","severity":1,"message":"125","line":3,"column":7,"nodeType":"126","messageId":"127","endLine":3,"endColumn":29},{"ruleId":"121","severity":1,"message":"122","line":16,"column":1,"nodeType":"123","endLine":97,"endColumn":2},{"ruleId":"128","severity":1,"message":"129","line":27,"column":37,"nodeType":"130","messageId":"131","endLine":27,"endColumn":38},{"ruleId":"128","severity":1,"message":"129","line":27,"column":55,"nodeType":"130","messageId":"131","endLine":27,"endColumn":56},{"ruleId":"128","severity":1,"message":"129","line":27,"column":74,"nodeType":"130","messageId":"131","endLine":27,"endColumn":75},{"ruleId":"128","severity":1,"message":"129","line":27,"column":89,"nodeType":"130","messageId":"131","endLine":27,"endColumn":90},{"ruleId":"128","severity":1,"message":"129","line":27,"column":103,"nodeType":"130","messageId":"131","endLine":27,"endColumn":104},{"ruleId":"128","severity":1,"message":"129","line":38,"column":30,"nodeType":"130","messageId":"131","endLine":38,"endColumn":31},{"ruleId":"128","severity":1,"message":"129","line":38,"column":46,"nodeType":"130","messageId":"131","endLine":38,"endColumn":47},{"ruleId":"128","severity":1,"message":"129","line":38,"column":59,"nodeType":"130","messageId":"131","endLine":38,"endColumn":60},{"ruleId":"128","severity":1,"message":"129","line":38,"column":76,"nodeType":"130","messageId":"131","endLine":38,"endColumn":77},{"ruleId":"128","severity":1,"message":"129","line":49,"column":39,"nodeType":"130","messageId":"131","endLine":49,"endColumn":40},{"ruleId":"128","severity":1,"message":"129","line":49,"column":56,"nodeType":"130","messageId":"131","endLine":49,"endColumn":57},{"ruleId":"124","severity":1,"message":"125","line":3,"column":7,"nodeType":"126","messageId":"127","endLine":3,"endColumn":29},{"ruleId":"124","severity":1,"message":"132","line":1,"column":9,"nodeType":"126","messageId":"127","endLine":1,"endColumn":17},{"ruleId":"124","severity":1,"message":"133","line":1,"column":19,"nodeType":"126","messageId":"127","endLine":1,"endColumn":28},{"ruleId":"121","severity":1,"message":"122","line":19,"column":1,"nodeType":"123","endLine":88,"endColumn":2},{"ruleId":"124","severity":1,"message":"133","line":1,"column":19,"nodeType":"126","messageId":"127","endLine":1,"endColumn":28},{"ruleId":"121","severity":1,"message":"122","line":19,"column":1,"nodeType":"123","endLine":131,"endColumn":2},{"ruleId":"124","severity":1,"message":"134","line":11,"column":7,"nodeType":"126","messageId":"127","endLine":11,"endColumn":28},{"ruleId":"135","severity":1,"message":"136","line":33,"column":8,"nodeType":"137","endLine":33,"endColumn":20,"suggestions":"138"},{"ruleId":"135","severity":1,"message":"139","line":37,"column":8,"nodeType":"137","endLine":37,"endColumn":21,"suggestions":"140"},{"ruleId":"135","severity":1,"message":"136","line":115,"column":8,"nodeType":"137","endLine":115,"endColumn":20,"suggestions":"141"},{"ruleId":"135","severity":1,"message":"139","line":119,"column":8,"nodeType":"137","endLine":119,"endColumn":21,"suggestions":"142"},{"ruleId":"135","severity":1,"message":"136","line":196,"column":8,"nodeType":"137","endLine":196,"endColumn":20,"suggestions":"143"},{"ruleId":"135","severity":1,"message":"139","line":200,"column":8,"nodeType":"137","endLine":200,"endColumn":21,"suggestions":"144"},{"ruleId":"135","severity":1,"message":"136","line":277,"column":8,"nodeType":"137","endLine":277,"endColumn":20,"suggestions":"145"},{"ruleId":"135","severity":1,"message":"139","line":281,"column":8,"nodeType":"137","endLine":281,"endColumn":21,"suggestions":"146"},{"ruleId":"135","severity":1,"message":"136","line":358,"column":8,"nodeType":"137","endLine":358,"endColumn":20,"suggestions":"147"},{"ruleId":"135","severity":1,"message":"139","line":362,"column":8,"nodeType":"137","endLine":362,"endColumn":21,"suggestions":"148"},{"ruleId":"135","severity":1,"message":"136","line":439,"column":8,"nodeType":"137","endLine":439,"endColumn":20,"suggestions":"149"},{"ruleId":"135","severity":1,"message":"139","line":443,"column":8,"nodeType":"137","endLine":443,"endColumn":21,"suggestions":"150"},{"ruleId":"121","severity":1,"message":"122","line":11,"column":1,"nodeType":"123","endLine":30,"endColumn":2},{"ruleId":"124","severity":1,"message":"151","line":15,"column":5,"nodeType":"126","messageId":"127","endLine":15,"endColumn":9},{"ruleId":"121","severity":1,"message":"122","line":18,"column":1,"nodeType":"123","endLine":66,"endColumn":2},{"ruleId":"124","severity":1,"message":"152","line":19,"column":26,"nodeType":"126","messageId":"127","endLine":19,"endColumn":41},{"ruleId":"124","severity":1,"message":"153","line":20,"column":28,"nodeType":"126","messageId":"127","endLine":20,"endColumn":45},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'defaultBackgroundColor' is assigned a value but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'useState' is defined but never used.","'useEffect' is defined but never used.","'CircleProgressBarBase' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updatePercentage'. Either include it or remove the dependency array.","ArrayExpression",["156"],"React Hook useEffect has missing dependencies: 'percentage' and 'updatePercentage'. Either include them or remove the dependency array.",["157"],["158"],["159"],["160"],["161"],["162"],["163"],["164"],["165"],["166"],["167"],"'Icon' is defined but never used.","'setPrimaryColor' is assigned a value but never used.","'setSecondaryColor' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"168","fix":"172"},{"desc":"170","fix":"173"},{"desc":"168","fix":"174"},{"desc":"170","fix":"175"},{"desc":"168","fix":"176"},{"desc":"170","fix":"177"},{"desc":"168","fix":"178"},{"desc":"170","fix":"179"},{"desc":"168","fix":"180"},{"desc":"170","fix":"181"},"Update the dependencies array to be: [percentage, updatePercentage]",{"range":"182","text":"183"},"Update the dependencies array to be: [percentage, progressBar, updatePercentage]",{"range":"184","text":"185"},{"range":"186","text":"183"},{"range":"187","text":"185"},{"range":"188","text":"183"},{"range":"189","text":"185"},{"range":"190","text":"183"},{"range":"191","text":"185"},{"range":"192","text":"183"},{"range":"193","text":"185"},{"range":"194","text":"183"},{"range":"195","text":"185"},[1075,1087],"[percentage, updatePercentage]",[1182,1195],"[percentage, progressBar, updatePercentage]",[4003,4015],[4110,4123],[6929,6941],[7036,7049],[9855,9867],[9962,9975],[12781,12793],[12888,12901],[15707,15719],[15814,15827]]